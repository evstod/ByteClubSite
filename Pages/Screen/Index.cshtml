@page
@model ByteClubSite.Pages.Screen.IndexModel
@{
    ViewData["Title"] = "Class Assignments";
}
<style>
    header, footer {
        display: none;
    }
    .classes {
        width: 100%;
        margin: 5vh 0 5vh 0;
    }
    .currentClass {
        width: 100%;
        display: flex;
        flex-direction: column;
    }
    .currentClass_header {
        width: 100%;
        display: flex;
        flex-direction: row;
        align-items: baseline;
        justify-content: space-between;

        border-bottom: 1px solid #FFF;
        margin-bottom: 2vh;
    }
    .currentClass_header h1 {
        font-size: 450%;
        padding-left: 20px;
    }
    .currentClass_header h4 {
        font-size: 170%;
        padding-right: 20px;
    }

</style>

<div class="classes">
    <div class="currentClass text-light">
        <div class="currentClass_header">
            <h1 id="dataClass"></h1>
            <h4 id="dataIndex"></h4>
        </div>
        <div class="currentClass_body" id="dataBody"></div>
    </div>
    @*@{
        foreach (var item in Model.Agendas)
        {
            <p class="text-light">@item.StartTime</p>
        }
        <p>@Model.AgendasList</p>
    }*@
</div>

@section Scripts {
    @*<script src="~/js/ScreenTimes.js"></script>*@
<script>
    var startTimes = JSON.parse('@Html.Raw(Json.Serialize(Model.AgendasList))'); //List of start times as milliseconds since EPOC
    var dateNow = new Date();
    var currentClass, nextClass; //Indexes of classes
    var currentData; //Data for current class
    for (var i = 0; i < startTimes.length; i++) {
        console.log("loop");
        if (dateNow.getTime() > startTimes[i] && i == 7) { //Current time is period 8 or after school
            currentClass = i;
            nextClass = 0;
            startTimes[0] += 86400000; //Start time is at period 1 time tomorrow
            break;
        }
        else if (dateNow.getTime() > startTimes[i] && dateNow.getTime() < startTimes[i + 1]) {
            currentClass = i;
            nextClass = i + 1;
            break;
        }
    }
    var dataString = '@Html.Raw(Json.Serialize(Model.Agendas))';
    // preserve newlines, etc - use valid JSON
    dataString = dataString.replace(/\\n/g, "\\n")
        .replace(/\\'/g, "\\'")
        .replace(/\\"/g, '\\"')
        .replace(/\\&/g, "\\&")
        .replace(/\\r/g, "\\r")
        .replace(/\\t/g, "\\t")
        .replace(/\\b/g, "\\b")
        .replace(/\\f/g, "\\f");
    // remove non-printable and other non-valid JSON chars
    dataString = dataString.replace(/[\u0000-\u0019]+/g, "");
    var currentData = JSON.parse(dataString)[currentClass]; //Get data for current class
    document.getElementById('dataClass').innerHTML = currentData.class;
    document.getElementById('dataIndex').innerHTML = "Period " + currentData.id;
    document.getElementById('dataBody').innerHTML = currentData.body;

    function refreshPage() {
        location.reload(true);
    }

    setTimeout(refreshPage, startTimes[nextClass] - Date.now()); //Refresh the page after the amount of time to get to next period start time

</script>
}